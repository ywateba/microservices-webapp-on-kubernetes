version: "3.8"

services:
  backend:
    image: arywatt/udagram-api:0.1.0
    container_name: monolith-udagram-api
    env_file:
      - env_vars
    # build:
    #   context: ./udagram-api-feed
    #   dockerfile: Dockerfile
    # ports:
    #  - "8080:8080"
    network_mode: "host"
    depends_on:
      - postgres_server

  frontend:
    image: arywatt/udagram-frontend:0.1.0
    container_name: monolith-udagram-frontend
    env_file:
      - env_vars
    build:
      context: ./udagram-frontend
      dockerfile: Dockerfile
    # ports:
    #   - "8081:80"
    network_mode: "host"
    depends_on:
      - backend

  postgres_server:
    image: postgres:latest
    container_name: monolith-postgres_server
    env_file:
      - env_vars
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    network_mode: "host"

  # postgres_client:
  #   image: postgres:latest
  #   container_name: postgres_client
  #   env_file:
  #     - env_vars
  #   depends_on:
  #     - postgres_server
  #   environment:
  #     PGPASSWORD: ${POSTGRES_PASSWORD}
  #   entrypoint: ["psql", "-h", "postgres_server", "-U", "user", "-d", "postgres", "-c"]
  #   command: ["SELECT 'Hello, PostgreSQL server!' AS greeting;"]

volumes:
  postgres_data:
    name: postgres_db

# networks:
#   monolith:
#     name: monolith
