version: "3.8"

services:
  backend-feed:
    image: arywatt/udagram-api-feed:0.1.0
    container_name: udagram-api-feed
    env_file:
      - api.env
      - db.env
    build:
      context: ./udagram-api-feed
      dockerfile: Dockerfile
    depends_on:
      - postgres_server

  backend-user:
    image: arywatt/udagram-api-user:0.1.0
    container_name: udagram-api-user
    env_file:
      - api.env
      - db.env
    build:
      context: ./udagram-api-user
      dockerfile: Dockerfile
    depends_on:
      - postgres_server

  frontend:
    image: arywatt/udagram-frontend:0.1.0
    container_name: udagram-frontend
    env_file:
     - api.env
    build:
      context: ./udagram-frontend
      dockerfile: Dockerfile
    ports:
      - "8100:80"
    depends_on:
      - reverseproxy



  reverseproxy:
    image: arywatt/udagram-reverse-proxy:0.1.0
    container_name: udagram-reverse-proxy
    build:
      context: ./udagram-reverse-proxy
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - backend-user
      - backend-feed

  postgres_server:
    image: postgres:latest
    container_name: postgres_server
    env_file:
     - db.env
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # postgres_client:
  #   image: postgres:latest
  #   container_name: postgres_client
  #   env_file:
  #     - env_vars
  #   depends_on:
  #     - postgres_server
  #   environment:
  #     PGPASSWORD: ${POSTGRES_PASSWORD}
  #   entrypoint: ["psql", "-h", "postgres_server", "-U", "user", "-d", "postgres", "-c"]
  #   command: ["SELECT 'Hello, PostgreSQL server!' AS greeting;"]

volumes:
  postgres_data:
    name: postgres_db
